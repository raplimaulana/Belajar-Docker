### MULTI STAGE BUILD ###
Saat membuat Dockerfile dari base image yang besar, secara otomatis Docker Image-nya pun akan menjadi besar juga. 
Oleh karena itu, usahakan selalu gunakan base image yang memang dibutuhkan saja. Jangan terlalu banyak menginstall fitur di image padahal tidak kita gunakan.

##contoh kasus dan solusi
#contoh kasus
Misal kita membuat docker image dengan base golang. Walaupun yang digunakan hanya 1 file main.go, tetap saja ukuran imagenya adalah 329MB.

Sebelumnya kita menggunakan bahasa pemrograman Go-Lang untuk membuat web sederhana.
Sebenarnya, Go-Lang memiliki fitur untuk melakukan kompilasi kode program Go-Lang menjadi binary file, sehingga tidak membutuhkan Image Go-Lang lagi
Kita bisa melakukan proses kompilasi di laptop kita, lalu file binary nya yang kita simpan di Image, dan cukup gunakan base image Linux Alpine misal nya
Namun pada kasus Go-Lang, kita di rekomendasikan melakukan kompilasi file binary di sistem operasi yang sama, pada kasus ini saya menggunakan Mac, sedangkan ingin menggunakan Image Alpine, jadi tidak bisa saya lakukan

#solusi
Docker memiliki fitur Multi Stage Build, dimana dalam Dockerfile, kita bisa membuat beberapa Build Stage atau tahapan build
Seperti kita tahu, bahwa di awal build, biasanya kita menggunakan instruksi FROM, dan di dalam Dockerfile, kita bisa menggunakan beberapa instruksi FROM
Setiap Instruksi FROM, artinya itu adalah build stage
Hal build stage terakhir adalah build stage yang akan dijadikan sebagai Image
Artinya, kita bisa memanfaatkan Docker build stage ini untuk melakukan proses kompilasi kode program Go-Lang kita

FROM golang:1.18-alpine as builder
WORKDIR /app/
COPY main.go .                            
RUN go build -o /app/main /app/main.go         

FROM alpine:3
WORKDIR /app/
COPY --from=builder /app/main ./          
CMD /app/main                             

FROM golang:1.18-alpine as builder
WORKDIR /app/
COPY main.go /app/                             #copy file main.go ke dalam folder /app/
RUN go build -o /app/main /app/main.go         #melakukan kompilasi file /app/main.go menjadi file binary yang disimpan ke dalam folder /app/main

FROM alpine:3
WORKDIR /app/
COPY --from=builder /app/main /app/             #melakukan copy folder /app/main dari build stage builder (golang:1.18-alpine) dan disimpan ke dalam folder /app/
CMD /app/main                                   #karena filenya yang di-copy berupa file binary, cukup panggil dengan "CMD /app/main", sehingga tidak memerlukan aplikasi golang lagi.